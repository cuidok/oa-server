package com.github.cuidok.oa.server.user;

import com.github.cuidok.oa.server.encryptor.LoginVerificationKeyDecryptor;
import com.github.cuidok.oa.server.user.mapper.UserQueryMapper;
import com.github.cuidok.oa.server.user.model.User;
import com.github.cuidok.oa.server.user.model.UserLoginParam;
import com.github.cuidok.oa.server.user.model.UserRegisterParam;
import com.github.cuidok.oa.server.verification.LoginVerificationCodeService;
import com.github.cuidok.oa.server.verification.LoginVerificationContainer;
import com.github.cuidok.oa.server.verification.LoginVerificationKeyService;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;

import static org.junit.jupiter.api.Assertions.*;

@SpringBootTest
class UserLoginServiceTest {

    @Autowired
    private UserLoginService userLoginService;

    @Autowired
    private UserRegisterService userRegisterService;

    @Autowired
    private LoginVerificationKeyService loginVerificationKeyService;

    @Autowired
    private LoginVerificationCodeService loginVerificationCodeService;

    @Autowired
    private LoginVerificationContainer loginVerificationContainer;

    @Autowired
    private LoginVerificationKeyDecryptor loginVerificationKeyDecryptor;

    @Autowired
    private UserTokenContainer userTokenContainer;

    @Autowired
    private UserQueryMapper userQueryMapper;

    @Test
    void login() {

        // Register
        UserRegisterParam param = new UserRegisterParam();
        param.setUsername("T_" + System.currentTimeMillis());
        param.setNickName("T_nickname");
        param.setPassword("T_password123");
        param.setEmail("T_" + System.currentTimeMillis() + "@test.com");
        userRegisterService.register(param);

        // Get the login verification code
        String key = loginVerificationKeyService.generateKey();
        loginVerificationCodeService.generateCodeImage(key);

        // Get the login verification code generated by system
        String keyOriginal = loginVerificationKeyDecryptor.decrypt(key);
        String code = loginVerificationContainer.get(keyOriginal).get().getCode();

        // Login
        UserLoginParam loginParam = new UserLoginParam();
        loginParam.setUsername(param.getUsername());
        loginParam.setPassword(param.getPassword());
        loginParam.setLoginVerificationKey(key);
        loginParam.setLoginVerificationCode(code);

        // Get the token
        String token = userLoginService.login(loginParam);
        assertNotNull(token);
        System.out.println(token);

        // Check the user token
        User userFromDatabase = userQueryMapper.selectUserByUsername(param.getUsername());
        assertNotNull(userTokenContainer.get(token));
        assertEquals(userFromDatabase.getId(), userTokenContainer.get(token).get().getId());
    }
}